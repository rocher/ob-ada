#+TITLE:Ada/SPARK support for org-mode


* Ada/SPARK : Hello World Example
#+BEGIN_SRC ada
  with Ada.Text_IO; use Ada.Text_IO;
  procedure Hello is
  begin
     Put_Line("Hello world! This is Ada/SPARK support for Emacs org-mode!");
  end Hello;
#+END_SRC

* SPARK : formally verified =Increment= function
If you have SPARK installed, try setting the =:prove= header argument of the
following block code to =t= and =gnatprove=  will verify this code.

#+BEGIN_SRC ada :version 2020 :unit main :prove t
  with Ada.Text_IO; use Ada.Text_IO;

  procedure Main with
    SPARK_Mode => On
  is
     procedure Increment (X : in out Integer) with
       Global  => null,
       Depends => (X => X),
       Pre     => (X < Integer'Last),
       Post    => (X = X'Old + 1)
     is
     begin
        X := X + 1;
     end Increment;

     My_Integer : Integer := Integer'Last - 1;
  begin
     Increment (My_Integer);
     Put_Line("Last Integer is" & My_Integer'Image);
  end Main;
#+END_SRC

* Template Support
** Basic support
With templates there is no need to write the full procedure, only the body. The
template is a wrapper for the procedure body, like this:

#+BEGIN_SRC ada :template proc-main
  Put_Line ("Hello, world --now with templates!");
#+END_SRC

** With-ing packages
Templates support =with= header parameters. For example, the header argument
#+BEGIN_EXAMPLE
  :with Ada.Text_IO Ada.Exceptions;
#+END_EXAMPLE

will be expanded to following the source code in the /with section/ of the
template:
#+BEGIN_SRC ada
  with Ada.Text_IO; use Ada.Text_IO;
  with Ada.Exceptions; use Ada.Exceptions;
#+END_SRC

*** Template 'proc-main'
The template ~proc-main~ already includes the module =Ada.Text_IO=, so there is
no need to write it. For example:
#+BEGIN_SRC ada :template proc-main
  declare
    X : Positive := 100;
  begin
    X := Positive'Last + X;
    Put_Line ("X =" & X'Image);
  exception
    when C : Constraint_Error =>
      Put_Line ("Exception caught");
  end;
#+END_SRC
